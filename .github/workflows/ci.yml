name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: fastapi_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev

    - name: Run linting with Ruff
      run: poetry run ruff check .

    - name: Check formatting with Black
      run: poetry run black --check .

    - name: Run type checking with MyPy
      run: poetry run mypy app tests

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql+asyncpg://app:app@localhost:5432/fastapi_test
        SECRET_KEY: test-secret-key-for-ci-pipeline-do-not-use-in-production
      run: poetry run pytest tests -v --cov=app --cov-report=xml --cov-report=term -m "not e2e"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  e2e-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: fastapi
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction --with dev

    - name: Install Playwright browsers
      run: poetry run playwright install --with-deps chromium

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql+asyncpg://app:app@localhost:5432/fastapi
        SECRET_KEY: test-secret-key-for-ci-pipeline-do-not-use-in-production
      run: poetry run alembic upgrade head

    - name: Start API server
      env:
        DATABASE_URL: postgresql+asyncpg://app:app@localhost:5432/fastapi
        SECRET_KEY: test-secret-key-for-ci-pipeline-do-not-use-in-production
      run: |
        poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 5
        curl -f http://localhost:8000/healthz || exit 1

    - name: Run E2E tests
      env:
        API_BASE_URL: http://localhost:8000
      run: poetry run pytest tests/e2e -v -m e2e

    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-artifacts
        path: |
          test-results/
          playwright-report/
        retention-days: 7

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.0

    - name: Check for security vulnerabilities
      run: |
        poetry add --group dev safety
        poetry run safety check --json || true

    - name: Run Bandit security scan
      run: |
        poetry add --group dev bandit
        poetry run bandit -r app -f json -o bandit-report.json || true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30

  docker-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: pyshop-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker compose -f docker-compose.yml config
        echo "Docker Compose configuration is valid"
